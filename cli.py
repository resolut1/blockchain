from wallet import generate_keys
from transaction import Transaction
from config import PORT

import argparse
import json
import requests


API_URL = f"http://localhost:{PORT}" # –ü–æ—Ä—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ config.py


def create_wallet():
    wallet = generate_keys()
    filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π: ")
    with open(f'{filename}.json', 'w') as f:
        json.dump(wallet, f)
    print(f"‚úÖ –ö–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {filename}")
    print("üîê Private:", wallet["private"])
    print("üîì Public :", wallet["public"])


def load_wallet(path):
    with open(f'{path}.json', 'r') as f:
        return json.load(f)


def get_balance(public_key):
    resp = requests.get(f"{API_URL}/balance/{public_key}")
    print("üí∞ –ë–∞–ª–∞–Ω—Å:", resp.json()["balance"])


def send_transaction(wallet_path, to_address, amount):
    wallet = load_wallet(wallet_path)
    tx = Transaction(wallet["public"], to_address, amount)
    tx.sign_message(wallet["private"])

    data = {
        "from": tx.from_address,
        "to": tx.to_address,
        "amount": tx.amount,
        "signature": tx.signature
    }

    resp = requests.post(f"{API_URL}/transactions/new", json=data)
    print("üì§ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", resp.json())


def mine(miner_wallet_path):
    wallet = load_wallet(miner_wallet_path)
    public_key = wallet["public"]
    private_key = wallet["private"]
    
    resp = requests.get(f"{API_URL}/mine", json={
        'miner': public_key,
        'private': private_key
    })
    print("‚õèÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –º–∞–π–Ω–∏–Ω–≥:", resp.json())


def main():
    parser = argparse.ArgumentParser(description="CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
    subparsers = parser.add_subparsers(dest="command")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    subparsers.add_parser("create-wallet", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance_parser = subparsers.add_parser("balance", help="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")
    balance_parser.add_argument("--wallet", required=True, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ—à–µ–ª—å–∫–∞")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    send_parser = subparsers.add_parser("send", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
    send_parser.add_argument("--wallet", required=True, help="–§–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞")
    send_parser.add_argument("--to", required=True, help="–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    send_parser.add_argument("--amount", type=float, required=True, help="–°—É–º–º–∞")

    # –ú–∞–π–Ω–∏–Ω–≥
    mine_parser = subparsers.add_parser("mine", help="–ù–∞–º–∞–π–Ω–∏—Ç—å –±–ª–æ–∫")
    mine_parser.add_argument("--wallet", required=True, help="–§–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã)")

    args = parser.parse_args()

    if args.command == "create-wallet":
        create_wallet()
    elif args.command == "balance":
        wallet = load_wallet(args.wallet)
        get_balance(wallet["public"])
    elif args.command == "send":
        send_transaction(args.wallet, args.to, args.amount)
    elif args.command == "mine":
        mine(args.wallet)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()

